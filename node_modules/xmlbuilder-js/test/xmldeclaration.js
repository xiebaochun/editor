(function() {
  var assert, vows, xmlbuilder;

  vows = require('vows');

  assert = require('assert');

  xmlbuilder = require('../src/index.coffee');

  vows.describe('XML Declaration').addBatch({
    'From create() without arguments': {
      topic: function() {
        return xmlbuilder.create('test');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?><test/>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'From create() with arguments': {
      topic: function() {
        return xmlbuilder.create('test', {
          version: '1.1',
          encoding: 'UTF-8',
          standalone: true
        });
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.1" encoding="UTF-8" standalone="yes"?><test/>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'From dec() without arguments': {
      topic: function() {
        return xmlbuilder.create('test', {
          headless: true
        }).dec().ele('node');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?><test><node/></test>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'From dec() with arguments': {
      topic: function() {
        return xmlbuilder.create('test').dec({
          version: '1.1',
          encoding: 'UTF-8',
          standalone: true
        }).ele('node');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.1" encoding="UTF-8" standalone="yes"?><test><node/></test>';
        return assert.strictEqual(topic.end(), xml);
      }
    }
  })["export"](module);

}).call(this);
