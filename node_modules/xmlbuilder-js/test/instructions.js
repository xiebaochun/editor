(function() {
  var assert, vows, xmlbuilder;

  vows = require('vows');

  assert = require('assert');

  xmlbuilder = require('../src/index.coffee');

  vows.describe('Processing Instructions').addBatch({
    'Simple': {
      topic: function() {
        return xmlbuilder.create('test17', {
          headless: true
        }).ins('pi', 'mypi');
      },
      'resulting XML': function(doc) {
        var xml;
        xml = '<?pi mypi?><test17/>';
        return assert.strictEqual(doc.end(), xml);
      }
    },
    'From object': {
      topic: function() {
        return xmlbuilder.create('test17', {
          headless: true
        }).ins({
          'pi': 'mypi',
          'pi2': 'mypi2',
          'pi3': null
        });
      },
      'resulting XML': function(doc) {
        var xml;
        xml = '<?pi mypi?><?pi2 mypi2?><?pi3?><test17/>';
        return assert.strictEqual(doc.end(), xml);
      }
    },
    'From array': {
      topic: function() {
        return xmlbuilder.create('test17', {
          headless: true
        }).ins(['pi', 'pi2']);
      },
      'resulting XML': function(doc) {
        var xml;
        xml = '<?pi?><?pi2?><test17/>';
        return assert.strictEqual(doc.end(), xml);
      }
    },
    'Complex': {
      topic: function() {
        return xmlbuilder.create('test18', {
          headless: true
        }).ins('renderCache.subset', '"Verdana" 0 0 ISO-8859-1 4 268 67 "#(),-./').ins('pitarget', function() {
          return 'pivalue';
        });
      },
      'resulting XML': function(doc) {
        var xml;
        xml = '<?renderCache.subset "Verdana" 0 0 ISO-8859-1 4 268 67 "#(),-./?><?pitarget pivalue?><test18/>';
        return assert.strictEqual(doc.end(), xml);
      }
    }
  })["export"](module);

}).call(this);
