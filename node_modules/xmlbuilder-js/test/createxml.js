(function() {
  var assert, vows, xmlbuilder;

  vows = require('vows');

  assert = require('assert');

  xmlbuilder = require('../src/index.coffee');

  vows.describe('Creating XML').addBatch({
    'Long form': {
      topic: function() {
        return xmlbuilder.create('root').ele('xmlbuilder').att('for', 'node-js').com('CoffeeScript is awesome.').nod('repo').att('type', 'git').txt('git://github.com/oozcitak/xmlbuilder-js.git').up().up().ele('test').att('escaped', 'chars <>\'"&\t\n\r').txt('complete 100%<>\'"&\t\n\r').up().ele('cdata').cdata('<test att="val">this is a test</test>\nSecond line').up().ele('raw').raw('&<>&').up().ele('atttest', {
          'att': 'val'
        }, 'text').up().ele('atttest', 'text');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?>' + '<root>' + '<xmlbuilder for="node-js">' + '<!-- CoffeeScript is awesome. -->' + '<repo type="git">git://github.com/oozcitak/xmlbuilder-js.git</repo>' + '</xmlbuilder>' + '<test escaped="chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;">complete 100%&lt;&gt;\'"&amp;\t\n&#xD;</test>' + '<cdata><![CDATA[<test att="val">this is a test</test>\nSecond line]]></cdata>' + '<raw>&<>&</raw>' + '<atttest att="val">text</atttest>' + '<atttest>text</atttest>' + '</root>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'Long form with attributes': {
      topic: function() {
        return xmlbuilder.create('root').ele('xmlbuilder', {
          'for': 'node-js'
        }).com('CoffeeScript is awesome.').nod('repo', {
          'type': 'git'
        }, 'git://github.com/oozcitak/xmlbuilder-js.git').up().up().ele('test', {
          'escaped': 'chars <>\'"&\t\n\r'
        }, 'complete 100%<>\'"&\t\n\r').up().ele('cdata').cdata('<test att="val">this is a test</test>\nSecond line').up().ele('raw').raw('&<>&').up().ele('atttest', {
          'att': 'val'
        }, 'text').up().ele('atttest', 'text').att('att', function() {
          return 'val';
        });
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?>' + '<root>' + '<xmlbuilder for="node-js">' + '<!-- CoffeeScript is awesome. -->' + '<repo type="git">git://github.com/oozcitak/xmlbuilder-js.git</repo>' + '</xmlbuilder>' + '<test escaped="chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;">complete 100%&lt;&gt;\'"&amp;\t\n&#xD;</test>' + '<cdata><![CDATA[<test att="val">this is a test</test>\nSecond line]]></cdata>' + '<raw>&<>&</raw>' + '<atttest att="val">text</atttest>' + '<atttest att="val">text</atttest>' + '</root>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'Pretty printing': {
      topic: function() {
        return xmlbuilder.create('root').ele('xmlbuilder', {
          'for': 'node-js'
        }).com('CoffeeScript is awesome.').nod('repo', {
          'type': 'git'
        }, 'git://github.com/oozcitak/xmlbuilder-js.git').up().up().ele('test', {
          'escaped': 'chars <>\'"&\t\n\r'
        }, 'complete 100%<>\'"&\t\n\r').up().ele('cdata').cdata('<test att="val">this is a test</test>\nSecond line').up().ele('raw').raw('&<>&').up().ele('atttest', {
          'att': 'val'
        }, 'text').up().ele('atttest', 'text').att('att', function() {
          return 'val';
        });
      },
      'resulting XML': function(topic) {
        var xml;
        xml = "<?xml version=\"1.0\"?>\n<root>\n    <xmlbuilder for=\"node-js\">\n        <!-- CoffeeScript is awesome. -->\n        <repo type=\"git\">git://github.com/oozcitak/xmlbuilder-js.git</repo>\n    </xmlbuilder>\n    <test escaped=\"chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;\">complete 100%&lt;&gt;\'\"&amp;\t\n&#xD;</test>\n    <cdata>\n        <![CDATA[<test att=\"val\">this is a test</test>\nSecond line]]>\n    </cdata>\n    <raw>&<>&</raw>\n    <atttest att=\"val\">text</atttest>\n    <atttest att=\"val\">text</atttest>\n</root>";
        return assert.strictEqual(topic.end({
          pretty: true,
          indent: '    '
        }), xml);
      }
    },
    'Pretty printing with offset': {
      topic: function() {
        return xmlbuilder.create('root').ele('xmlbuilder', {
          'for': 'node-js'
        }).com('CoffeeScript is awesome.').nod('repo', {
          'type': 'git'
        }, 'git://github.com/oozcitak/xmlbuilder-js.git').up().up().ele('test', {
          'escaped': 'chars <>\'"&\t\n\r'
        }, 'complete 100%<>\'"&\t\n\r').up().ele('cdata').cdata('<test att="val">this is a test</test>\nSecond line').up().ele('raw').raw('&<>&').up().ele('atttest', {
          'att': 'val'
        }, 'text').up().ele('atttest', 'text').att('att', function() {
          return 'val';
        });
      },
      'resulting XML': function(topic) {
        var pattern, xml;
        xml = "TEMPORARY_INDENT\n    <?xml version=\"1.0\"?>\n    <root>\n        <xmlbuilder for=\"node-js\">\n            <!-- CoffeeScript is awesome. -->\n            <repo type=\"git\">git://github.com/oozcitak/xmlbuilder-js.git</repo>\n        </xmlbuilder>\n        <test escaped=\"chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;\">complete 100%&lt;&gt;\'\"&amp;\t\n&#xD;</test>\n        <cdata>\n            <![CDATA[<test att=\"val\">this is a test</test>\nSecond line]]>\n        </cdata>\n        <raw>&<>&</raw>\n        <atttest att=\"val\">text</atttest>\n        <atttest att=\"val\">text</atttest>\n    </root>";
        pattern = /TEMPORARY_INDENT\n/;
        xml = xml.replace(pattern, '');
        return assert.strictEqual(topic.end({
          pretty: true,
          indent: '    ',
          offset: 1
        }), xml);
      }
    },
    'Pretty printing with empty indent': {
      topic: function() {
        return xmlbuilder.create('root').ele('xmlbuilder', {
          'for': 'node-js'
        }).com('CoffeeScript is awesome.').nod('repo', {
          'type': 'git'
        }, 'git://github.com/oozcitak/xmlbuilder-js.git').up().up().ele('test', {
          'escaped': 'chars <>\'"&\t\n\r'
        }, 'complete 100%<>\'"&\t\n\r').up().ele('cdata').cdata('<test att="val">this is a test</test>\nSecond line').up().ele('raw').raw('&<>&').up().ele('atttest', {
          'att': 'val'
        }, 'text').up().ele('atttest', 'text').att('att', function() {
          return 'val';
        });
      },
      'resulting XML': function(topic) {
        var xml;
        xml = "<?xml version=\"1.0\"?>\n<root>\n<xmlbuilder for=\"node-js\">\n<!-- CoffeeScript is awesome. -->\n<repo type=\"git\">git://github.com/oozcitak/xmlbuilder-js.git</repo>\n</xmlbuilder>\n<test escaped=\"chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;\">complete 100%&lt;&gt;\'\"&amp;\t\n&#xD;</test>\n<cdata>\n<![CDATA[<test att=\"val\">this is a test</test>\nSecond line]]>\n</cdata>\n<raw>&<>&</raw>\n<atttest att=\"val\">text</atttest>\n<atttest att=\"val\">text</atttest>\n</root>";
        return assert.strictEqual(topic.end({
          pretty: true,
          indent: ''
        }), xml);
      }
    },
    'Short form with attributes': {
      topic: function() {
        return xmlbuilder.create('root').e('xmlbuilder', {
          'for': 'node-js'
        }).c('CoffeeScript is awesome.').n('repo', {
          'type': 'git'
        }, 'git://github.com/oozcitak/xmlbuilder-js.git').u().u().e('test', {
          'escaped': 'chars <>\'"&\t\n\r'
        }, 'complete 100%<>\'"&\t\n\r').u().e('cdata').d('<test att="val">this is a test</test>\nSecond line').u().e('raw').r('&<>&').u().e('atttest', {
          'att': 'val'
        }, 'text').u().e('atttest', 'text');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?>' + '<root>' + '<xmlbuilder for="node-js">' + '<!-- CoffeeScript is awesome. -->' + '<repo type="git">git://github.com/oozcitak/xmlbuilder-js.git</repo>' + '</xmlbuilder>' + '<test escaped="chars &lt;>\'&quot;&amp;&#x9;&#xA;&#xD;">complete 100%&lt;&gt;\'"&amp;\t\n&#xD;</test>' + '<cdata><![CDATA[<test att="val">this is a test</test>\nSecond line]]></cdata>' + '<raw>&<>&</raw>' + '<atttest att="val">text</atttest>' + '<atttest>text</atttest>' + '</root>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'create() without arguments': {
      topic: function() {
        return xmlbuilder.create('test14').ele('node').txt('test');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.0"?><test14><node>test</node></test14>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'create() with arguments': {
      topic: function() {
        return xmlbuilder.create('test14', {
          'version': '1.1'
        }).ele('node').txt('test');
      },
      'resulting XML': function(topic) {
        var xml;
        xml = '<?xml version="1.1"?><test14><node>test</node></test14>';
        return assert.strictEqual(topic.end(), xml);
      }
    },
    'create() with merged arguments': {
      topic: function() {
        var xml1, xml2;
        xml1 = xmlbuilder.create('test14', {
          version: '1.1',
          encoding: 'UTF-8',
          standalone: true,
          sysID: 'hello.dtd'
        }).ele('node').txt('test');
        xml2 = xmlbuilder.create('test14', {
          headless: true,
          version: '1.1',
          encoding: 'UTF-8',
          standalone: true,
          sysID: 'hello.dtd'
        }).ele('node').txt('test');
        return [xml1, xml2];
      },
      'resulting XML1': function(topic) {
        var xml1;
        xml1 = '<?xml version="1.1" encoding="UTF-8" standalone="yes"?>' + '<!DOCTYPE test14 SYSTEM "hello.dtd"><test14><node>test</node></test14>';
        return assert.strictEqual(topic[0].end(), xml1);
      },
      'resulting XML2': function(topic) {
        var xml2;
        xml2 = '<test14><node>test</node></test14>';
        return assert.strictEqual(topic[1].end(), xml2);
      }
    }
  })["export"](module);

}).call(this);
